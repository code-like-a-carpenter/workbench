AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Conditions:
  IsDev: !Equals
    - !Ref StageName
    - development

Globals:
  Function:
    Environment:
      Variables:
        NODE_ENV: !If
          - IsDev
          - 'development'
          - 'production'
        REPOSITORY_URL: !Ref RepoUrl
        SHA: !Ref SHA
        STAGE_NAME: !Ref StageName
    Handler: index.handler
    MemorySize: 256
    Runtime: nodejs18.x
    Tracing: Active
    Timeout: 30

Outputs:
  ApiUrl:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/'

Parameters:
  LogRetention:
    Type: Number
    Default: '3'
    Description: Duration in days to retain logs

  RepoUrl:
    Type: String

  StageName:
    Type: String
    Description: Name of API stage.

  SHA:
    Type: String

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      # Note: need to use DefinitionBody with Fn::Transform rather than
      # DefinitionUri so that we can use CloudFormation variables in api.yml
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: api.yml
      StageName: !Ref StageName
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":$context.requestTimeEpoch,"httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":$context.status,"protocol":"$context.protocol","responseLength":$context.responseLength,"path":"$context.path","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","userAgent":"$context.identity.userAgent"}'
      MethodSettings:
        - HttpMethod: '*'
          LoggingLevel: !If
            - IsDev
            - 'INFO'
            - 'OFF'
          MetricsEnabled: true
          ResourcePath: '/*'

  APIExecutionLogs:
    Properties:
      LogGroupName:
        Fn::Sub: 'API-Gateway-Execution-Logs_${Api}'
      RetentionInDays:
        Ref: 'LogRetention'
    Type: 'AWS::Logs::LogGroup'

  APIStageExecutionLogs:
    Properties:
      LogGroupName:
        Fn::Sub: 'API-Gateway-Execution-Logs_${Api}/${StageName}'
      RetentionInDays:
        Ref: 'LogRetention'
    Type: 'AWS::Logs::LogGroup'

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogRetention

  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  FnPing:
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        EntryPoints:
          - 'index'
        External:
          - '@aws-sdk/*'
          - 'aws-sdk'
        Minify: false
        Sourcemap: true
        Target: 'es2020'
    Properties:
      CodeUri: 'src'
      Handler: 'index.ping'
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - 'AWSLambda_ReadOnlyAccess'
        - 'AWSXrayWriteOnlyAccess'
        - 'CloudWatchLambdaInsightsExecutionRolePolicy'
        - CloudWatchPutMetricPolicy: {}
      Timeout: 30
    Type: 'AWS::Serverless::Function'

  FnPingResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../_common/rest.yml
      Parameters:
        Api: !Ref Api
        FunctionName: !Ref FnPing
        LogRetention: !Ref LogRetention
        Method: GET
        Path: /api/v1/ping

  FnErrors:
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        EntryPoints:
          - 'index'
        External:
          - '@aws-sdk/*'
          - 'aws-sdk'
        Minify: false
        Sourcemap: true
        Target: 'es2020'
    Properties:
      CodeUri: 'src'
      Handler: 'index.errors'
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - 'AWSLambda_ReadOnlyAccess'
        - 'AWSXrayWriteOnlyAccess'
        - 'CloudWatchLambdaInsightsExecutionRolePolicy'
        - CloudWatchPutMetricPolicy: {}
      Timeout: 30
    Type: 'AWS::Serverless::Function'

  FnErrorsResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../_common/rest.yml
      Parameters:
        Api: !Ref Api
        FunctionName: !Ref FnErrors
        LogRetention: !Ref LogRetention
        Method: GET
        Path: /api/v1/errors
