AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  IsProd:
    Fn::Equals:
      - Ref: StageName
      - production
Globals:
  Function:
    Environment:
      Variables:
        TABLE_ACCOUNT:
          Ref: TableAccount
        TABLE_METRIC:
          Ref: TableMetric
        TABLE_PLAN_METRIC:
          Ref: TablePlanMetric
        TABLE_SUBSCRIPTION_EVENT:
          Ref: TableSubscriptionEvent
    Handler: index.handler
    MemorySize: 256
    Runtime: nodejs18.x
    Timeout: 30
    Tracing: Active
Outputs:
  TableAccount:
    Description: The name of the DynamoDB table for TableAccount
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-TableAccount
    Value:
      Ref: TableAccount
  TableMetric:
    Description: The name of the DynamoDB table for TableMetric
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-TableMetric
    Value:
      Ref: TableMetric
  TablePlanMetric:
    Description: The name of the DynamoDB table for TablePlanMetric
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-TablePlanMetric
    Value:
      Ref: TablePlanMetric
  TableSubscriptionEvent:
    Description: The name of the DynamoDB table for TableSubscriptionEvent
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-TableSubscriptionEvent
    Value:
      Ref: TableSubscriptionEvent
Parameters:
  LogRetentionInDays:
    Default: '3'
    Description: Log retention in days
    Type: Number
  StageName:
    AllowedValues:
      - development
      - production
      - test
    Default: development
    Description: The name of the stage
    Type: String
Resources:
  FnHandlerSEUpsertA5b59364d:
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - ./index
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: es2022
    Properties:
      CodeUri: enricher--subscription-event--upsert--account
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
            Queue:
              Fn::GetAtt:
                - FnHandlerSEUpsertA5b59364dQueue
                - Arn
          Type: SQS
      MemorySize: 256
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - CloudWatchPutMetricPolicy: {}
        - DynamoDBCrudPolicy:
            TableName:
              Ref: TableAccount
        - SQSSendMessagePolicy:
            QueueName:
              Fn::GetAtt:
                - FnHandlerSEUpsertA5b59364dDLQ
                - QueueName
      Timeout: 90
    Type: AWS::Serverless::Function
  FnHandlerSEUpsertA5b59364dDLQ:
    Properties:
      KmsMasterKeyId:
        Fn::If:
          - IsProd
          - Ref: FnHandlerSEUpsertA5b59364dQueueKey
          - AWS::NoValue
    Type: AWS::SQS::Queue
  FnHandlerSEUpsertA5b59364dLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${FnHandlerSEUpsertA5b59364d}
      RetentionInDays:
        Ref: LogRetentionInDays
    Type: AWS::Logs::LogGroup
  FnHandlerSEUpsertA5b59364dQueue:
    Properties:
      Fn::If:
        - IsProd
        - KmsMasterKeyId:
            Ref: FnHandlerSEUpsertA5b59364dQueueKey
          RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - FnHandlerSEUpsertA5b59364dDLQ
                - Arn
            maxReceiveCount: 3
          VisibilityTimeout: 320
        - RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - FnHandlerSEUpsertA5b59364dDLQ
                - Arn
            maxReceiveCount: 3
          VisibilityTimeout: 320
    Type: AWS::SQS::Queue
  FnHandlerSEUpsertA5b59364dQueueKey:
    Condition: IsProd
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource: '*'
            Sid: Allow EventBridge to use the Key
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
            Sid: Allow administration of the key
          - Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
              - kms:DescribeKey
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Fn::Sub: ${AWS::AccountId}
                kms:ViaService: sqs.us-east-1.amazonaws.com
            Effect: Allow
            Principal:
              AWS: '*'
            Resource: '*'
            Sid: >-
              Allow access through Simple Queue Service (SQS) for all principals
              in the account that are authorized to use SQS
          - Action:
              - kms:Describe*
              - kms:Get*
              - kms:List*
              - kms:RevokeGrant
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
            Sid: Allow direct access to key metadata to the account
        Version: '2012-10-17'
      PendingWindowInDays: 7
    Type: AWS::KMS::Key
  FnHandlerSEUpsertA5b59364dQueuePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Fn::GetAtt:
                    - FnHandlerSEUpsertA5b59364dRule
                    - Arn
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource:
              Fn::GetAtt:
                - FnHandlerSEUpsertA5b59364dQueue
                - Arn
            Sid: Allow EventBridge to send messages to the queue
      Queues:
        - Ref: FnHandlerSEUpsertA5b59364dQueue
    Type: AWS::SQS::QueuePolicy
  FnHandlerSEUpsertA5b59364dRule:
    Properties:
      EventBusName: default
      EventPattern:
        detail:
          dynamodb:
            NewImage:
              _et:
                S:
                  - SubscriptionEvent
        detail-type:
          - INSERT
          - MODIFY
        resources:
          - Fn::GetAtt:
              - TableSubscriptionEvent
              - Arn
        source:
          - TableSubscriptionEvent.SubscriptionEvent
      Targets:
        - Arn:
            Fn::GetAtt:
              - FnHandlerSEUpsertA5b59364dQueue
              - Arn
          Id: FnHandlerSEUpsertA5b59364d
    Type: AWS::Events::Rule
  FnTriggerAUpsert7f5401fa:
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - ./index
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: es2022
    Properties:
      CodeUri: trigger--account--upsert
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
            Queue:
              Fn::GetAtt:
                - FnTriggerAUpsert7f5401faQueue
                - Arn
          Type: SQS
      MemorySize: 256
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - CloudWatchPutMetricPolicy: {}
        - DynamoDBReadPolicy:
            TableName:
              Ref: TableAccount
        - DynamoDBCrudPolicy:
            TableName:
              Ref: TablePlanMetric
        - SQSSendMessagePolicy:
            QueueName:
              Fn::GetAtt:
                - FnTriggerAUpsert7f5401faDLQ
                - QueueName
      Timeout: 90
    Type: AWS::Serverless::Function
  FnTriggerAUpsert7f5401faDLQ:
    Properties:
      KmsMasterKeyId:
        Fn::If:
          - IsProd
          - Ref: FnTriggerAUpsert7f5401faQueueKey
          - AWS::NoValue
    Type: AWS::SQS::Queue
  FnTriggerAUpsert7f5401faLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${FnTriggerAUpsert7f5401fa}
      RetentionInDays:
        Ref: LogRetentionInDays
    Type: AWS::Logs::LogGroup
  FnTriggerAUpsert7f5401faQueue:
    Properties:
      Fn::If:
        - IsProd
        - KmsMasterKeyId:
            Ref: FnTriggerAUpsert7f5401faQueueKey
          RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - FnTriggerAUpsert7f5401faDLQ
                - Arn
            maxReceiveCount: 3
          VisibilityTimeout: 320
        - RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - FnTriggerAUpsert7f5401faDLQ
                - Arn
            maxReceiveCount: 3
          VisibilityTimeout: 320
    Type: AWS::SQS::Queue
  FnTriggerAUpsert7f5401faQueueKey:
    Condition: IsProd
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource: '*'
            Sid: Allow EventBridge to use the Key
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
            Sid: Allow administration of the key
          - Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
              - kms:DescribeKey
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Fn::Sub: ${AWS::AccountId}
                kms:ViaService: sqs.us-east-1.amazonaws.com
            Effect: Allow
            Principal:
              AWS: '*'
            Resource: '*'
            Sid: >-
              Allow access through Simple Queue Service (SQS) for all principals
              in the account that are authorized to use SQS
          - Action:
              - kms:Describe*
              - kms:Get*
              - kms:List*
              - kms:RevokeGrant
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
            Sid: Allow direct access to key metadata to the account
        Version: '2012-10-17'
      PendingWindowInDays: 7
    Type: AWS::KMS::Key
  FnTriggerAUpsert7f5401faQueuePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Fn::GetAtt:
                    - FnTriggerAUpsert7f5401faRule
                    - Arn
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource:
              Fn::GetAtt:
                - FnTriggerAUpsert7f5401faQueue
                - Arn
            Sid: Allow EventBridge to send messages to the queue
      Queues:
        - Ref: FnTriggerAUpsert7f5401faQueue
    Type: AWS::SQS::QueuePolicy
  FnTriggerAUpsert7f5401faRule:
    Properties:
      EventBusName: default
      EventPattern:
        detail:
          dynamodb:
            NewImage:
              _et:
                S:
                  - Account
        detail-type:
          - INSERT
          - MODIFY
        resources:
          - Fn::GetAtt:
              - TableAccount
              - Arn
        source:
          - TableAccount.Account
      Targets:
        - Arn:
            Fn::GetAtt:
              - FnTriggerAUpsert7f5401faQueue
              - Arn
          Id: FnTriggerAUpsert7f5401fa
    Type: AWS::Events::Rule
  FnTriggerPMUpsert2b2e8d7d:
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - ./index
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: es2022
    Properties:
      CodeUri: trigger--plan-metric--upsert
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
            Queue:
              Fn::GetAtt:
                - FnTriggerPMUpsert2b2e8d7dQueue
                - Arn
          Type: SQS
      MemorySize: 256
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - CloudWatchPutMetricPolicy: {}
        - DynamoDBReadPolicy:
            TableName:
              Ref: TablePlanMetric
        - DynamoDBCrudPolicy:
            TableName:
              Ref: TableMetric
        - SQSSendMessagePolicy:
            QueueName:
              Fn::GetAtt:
                - FnTriggerPMUpsert2b2e8d7dDLQ
                - QueueName
      Timeout: 90
    Type: AWS::Serverless::Function
  FnTriggerPMUpsert2b2e8d7dDLQ:
    Properties:
      KmsMasterKeyId:
        Fn::If:
          - IsProd
          - Ref: FnTriggerPMUpsert2b2e8d7dQueueKey
          - AWS::NoValue
    Type: AWS::SQS::Queue
  FnTriggerPMUpsert2b2e8d7dLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${FnTriggerPMUpsert2b2e8d7d}
      RetentionInDays:
        Ref: LogRetentionInDays
    Type: AWS::Logs::LogGroup
  FnTriggerPMUpsert2b2e8d7dQueue:
    Properties:
      Fn::If:
        - IsProd
        - KmsMasterKeyId:
            Ref: FnTriggerPMUpsert2b2e8d7dQueueKey
          RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - FnTriggerPMUpsert2b2e8d7dDLQ
                - Arn
            maxReceiveCount: 3
          VisibilityTimeout: 320
        - RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - FnTriggerPMUpsert2b2e8d7dDLQ
                - Arn
            maxReceiveCount: 3
          VisibilityTimeout: 320
    Type: AWS::SQS::Queue
  FnTriggerPMUpsert2b2e8d7dQueueKey:
    Condition: IsProd
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource: '*'
            Sid: Allow EventBridge to use the Key
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
            Sid: Allow administration of the key
          - Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
              - kms:DescribeKey
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Fn::Sub: ${AWS::AccountId}
                kms:ViaService: sqs.us-east-1.amazonaws.com
            Effect: Allow
            Principal:
              AWS: '*'
            Resource: '*'
            Sid: >-
              Allow access through Simple Queue Service (SQS) for all principals
              in the account that are authorized to use SQS
          - Action:
              - kms:Describe*
              - kms:Get*
              - kms:List*
              - kms:RevokeGrant
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
            Sid: Allow direct access to key metadata to the account
        Version: '2012-10-17'
      PendingWindowInDays: 7
    Type: AWS::KMS::Key
  FnTriggerPMUpsert2b2e8d7dQueuePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Fn::GetAtt:
                    - FnTriggerPMUpsert2b2e8d7dRule
                    - Arn
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource:
              Fn::GetAtt:
                - FnTriggerPMUpsert2b2e8d7dQueue
                - Arn
            Sid: Allow EventBridge to send messages to the queue
      Queues:
        - Ref: FnTriggerPMUpsert2b2e8d7dQueue
    Type: AWS::SQS::QueuePolicy
  FnTriggerPMUpsert2b2e8d7dRule:
    Properties:
      EventBusName: default
      EventPattern:
        detail:
          dynamodb:
            NewImage:
              _et:
                S:
                  - PlanMetric
        detail-type:
          - INSERT
          - MODIFY
        resources:
          - Fn::GetAtt:
              - TablePlanMetric
              - Arn
        source:
          - TablePlanMetric.PlanMetric
      Targets:
        - Arn:
            Fn::GetAtt:
              - FnTriggerPMUpsert2b2e8d7dQueue
              - Arn
          Id: FnTriggerPMUpsert2b2e8d7d
    Type: AWS::Events::Rule
  TableAccount:
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi1pk
          AttributeType: S
        - AttributeName: gsi1sk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: gsi1
          KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: gsi1sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - IsProd
            - true
            - false
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: StageName
          Value:
            Ref: StageName
        - Key: TableName
          Value: TableAccount
    Type: AWS::DynamoDB::Table
  TableAccountCDCDispatcher:
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - ./index
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: es2022
    Properties:
      CodeUri: dispatcher-table-account
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
            MaximumRetryAttempts: 3
            StartingPosition: TRIM_HORIZON
            Stream:
              Fn::GetAtt:
                - TableAccount
                - StreamArn
          Type: DynamoDB
      MemorySize: 384
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - CloudWatchPutMetricPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: default
      Timeout: 60
    Type: AWS::Serverless::Function
  TableAccountCDCDispatcherLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${TableAccountCDCDispatcher}
      RetentionInDays:
        Ref: LogRetentionInDays
    Type: AWS::Logs::LogGroup
  TableMetric:
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - IsProd
            - true
            - false
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: StageName
          Value:
            Ref: StageName
        - Key: TableName
          Value: TableMetric
    Type: AWS::DynamoDB::Table
  TablePlanMetric:
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - IsProd
            - true
            - false
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: StageName
          Value:
            Ref: StageName
        - Key: TableName
          Value: TablePlanMetric
    Type: AWS::DynamoDB::Table
  TablePlanMetricCDCDispatcher:
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - ./index
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: es2022
    Properties:
      CodeUri: dispatcher-table-plan-metric
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
            MaximumRetryAttempts: 3
            StartingPosition: TRIM_HORIZON
            Stream:
              Fn::GetAtt:
                - TablePlanMetric
                - StreamArn
          Type: DynamoDB
      MemorySize: 384
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - CloudWatchPutMetricPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: default
      Timeout: 60
    Type: AWS::Serverless::Function
  TablePlanMetricCDCDispatcherLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${TablePlanMetricCDCDispatcher}
      RetentionInDays:
        Ref: LogRetentionInDays
    Type: AWS::Logs::LogGroup
  TableSubscriptionEvent:
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - IsProd
            - true
            - false
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: StageName
          Value:
            Ref: StageName
        - Key: TableName
          Value: TableSubscriptionEvent
    Type: AWS::DynamoDB::Table
  TableSubscriptionEventCDCDispatcher:
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - ./index
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: es2022
    Properties:
      CodeUri: dispatcher-table-subscription-event
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
            MaximumRetryAttempts: 3
            StartingPosition: TRIM_HORIZON
            Stream:
              Fn::GetAtt:
                - TableSubscriptionEvent
                - StreamArn
          Type: DynamoDB
      MemorySize: 384
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - CloudWatchPutMetricPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: default
      Timeout: 60
    Type: AWS::Serverless::Function
  TableSubscriptionEventCDCDispatcherLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${TableSubscriptionEventCDCDispatcher}
      RetentionInDays:
        Ref: LogRetentionInDays
    Type: AWS::Logs::LogGroup
Transform: AWS::Serverless-2016-10-31
