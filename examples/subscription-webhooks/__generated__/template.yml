Conditions:
  IsProd:
    Fn::Equals:
      - 'StageName'
      - 'Production'
Globals:
  Function:
    Environment:
      Variables:
        TABLE_SUBSCRIPTION_EVENT:
          Ref: 'TableSubscriptionEvent'
Outputs:
  TableAccount:
    Description: 'The name of the DynamoDB table for TableAccount'
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-TableAccount'
    Value:
      Ref: 'TableAccount'
  TableMetric:
    Description: 'The name of the DynamoDB table for TableMetric'
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-TableMetric'
    Value:
      Ref: 'TableMetric'
  TablePlanMetric:
    Description: 'The name of the DynamoDB table for TablePlanMetric'
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-TablePlanMetric'
    Value:
      Ref: 'TablePlanMetric'
  TableSubscriptionEvent:
    Description: 'The name of the DynamoDB table for TableSubscriptionEvent'
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-TableSubscriptionEvent'
    Value:
      Ref: 'TableSubscriptionEvent'
Parameters:
  LogRetentionInDays:
    Default: '3'
    Description: 'Log retention in days'
    Type: 'Number'
Resources:
  TableAccount:
    Properties:
      AttributeDefinitions:
        - AttributeName: 'pk'
          AttributeType: 'S'
        - AttributeName: 'sk'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      GlobalSecondaryIndexes:
        - IndexName: 'gsi1'
          KeySchema:
            - AttributeName: 'gsi1pk'
              KeyType: 'HASH'
            - AttributeName: 'gsi1sk'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: 'ALL'
      KeySchema:
        - AttributeName: 'pk'
          KeyType: 'HASH'
        - AttributeName: 'sk'
          KeyType: 'RANGE'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      SSESpecification:
        SSEEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      Tags:
        - Key: 'StageName'
          Value:
            Ref: 'StageName'
        - Key: 'TableName'
          Value: 'TableAccount'
    Type: 'AWS::DynamoDB::Table'
  TableAccountCDCDispatcher:
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        EntryPoints:
          - './index'
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: 'es2020'
    Properties:
      CodeUri: 'dispatcher-table-account'
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - 'ReportBatchItemFailures'
            MaximumRetryAttempts: 3
            StartingPosition: 'TRIM_HORIZON'
            Stream:
              Fn::GetAtt:
                - 'TableAccount'
                - 'StreamArn'
          Type: 'DynamoDB'
      MemorySize: 256
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - 'AWSLambda_ReadOnlyAccess'
        - 'AWSXrayWriteOnlyAccess'
        - 'CloudWatchLambdaInsightsExecutionRolePolicy'
        - CloudWatchPutMetricPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: 'default'
      Timeout: 30
    Type: 'AWS::Serverless::Function'
  TableAccountCDCDispatcherLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: '/aws/lambda/${TableAccountCDCDispatcher}'
      RetentionInDays:
        Ref: 'LogRetentionInDays'
    Type: 'AWS::Logs::LogGroup'
  TableMetric:
    Properties:
      AttributeDefinitions:
        - AttributeName: 'pk'
          AttributeType: 'S'
        - AttributeName: 'sk'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      KeySchema:
        - AttributeName: 'pk'
          KeyType: 'HASH'
        - AttributeName: 'sk'
          KeyType: 'RANGE'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      SSESpecification:
        SSEEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      Tags:
        - Key: 'StageName'
          Value:
            Ref: 'StageName'
        - Key: 'TableName'
          Value: 'TableMetric'
    Type: 'AWS::DynamoDB::Table'
  TablePlanMetric:
    Properties:
      AttributeDefinitions:
        - AttributeName: 'pk'
          AttributeType: 'S'
        - AttributeName: 'sk'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      KeySchema:
        - AttributeName: 'pk'
          KeyType: 'HASH'
        - AttributeName: 'sk'
          KeyType: 'RANGE'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      SSESpecification:
        SSEEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      Tags:
        - Key: 'StageName'
          Value:
            Ref: 'StageName'
        - Key: 'TableName'
          Value: 'TablePlanMetric'
    Type: 'AWS::DynamoDB::Table'
  TablePlanMetricCDCDispatcher:
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        EntryPoints:
          - './index'
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: 'es2020'
    Properties:
      CodeUri: 'dispatcher-table-plan-metric'
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - 'ReportBatchItemFailures'
            MaximumRetryAttempts: 3
            StartingPosition: 'TRIM_HORIZON'
            Stream:
              Fn::GetAtt:
                - 'TablePlanMetric'
                - 'StreamArn'
          Type: 'DynamoDB'
      MemorySize: 256
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - 'AWSLambda_ReadOnlyAccess'
        - 'AWSXrayWriteOnlyAccess'
        - 'CloudWatchLambdaInsightsExecutionRolePolicy'
        - CloudWatchPutMetricPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: 'default'
      Timeout: 30
    Type: 'AWS::Serverless::Function'
  TablePlanMetricCDCDispatcherLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: '/aws/lambda/${TablePlanMetricCDCDispatcher}'
      RetentionInDays:
        Ref: 'LogRetentionInDays'
    Type: 'AWS::Logs::LogGroup'
  TableSubscriptionEvent:
    Properties:
      AttributeDefinitions:
        - AttributeName: 'pk'
          AttributeType: 'S'
        - AttributeName: 'sk'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      KeySchema:
        - AttributeName: 'pk'
          KeyType: 'HASH'
        - AttributeName: 'sk'
          KeyType: 'RANGE'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      SSESpecification:
        SSEEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      Tags:
        - Key: 'StageName'
          Value:
            Ref: 'StageName'
        - Key: 'TableName'
          Value: 'TableSubscriptionEvent'
    Type: 'AWS::DynamoDB::Table'
  TableSubscriptionEventCDCDispatcher:
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        EntryPoints:
          - './index'
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: 'es2020'
    Properties:
      CodeUri: 'dispatcher-table-subscription-event'
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - 'ReportBatchItemFailures'
            MaximumRetryAttempts: 3
            StartingPosition: 'TRIM_HORIZON'
            Stream:
              Fn::GetAtt:
                - 'TableSubscriptionEvent'
                - 'StreamArn'
          Type: 'DynamoDB'
      MemorySize: 256
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - 'AWSLambda_ReadOnlyAccess'
        - 'AWSXrayWriteOnlyAccess'
        - 'CloudWatchLambdaInsightsExecutionRolePolicy'
        - CloudWatchPutMetricPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: 'default'
      Timeout: 30
    Type: 'AWS::Serverless::Function'
  TableSubscriptionEventCDCDispatcherLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: '/aws/lambda/${TableSubscriptionEventCDCDispatcher}'
      RetentionInDays:
        Ref: 'LogRetentionInDays'
    Type: 'AWS::Logs::LogGroup'
