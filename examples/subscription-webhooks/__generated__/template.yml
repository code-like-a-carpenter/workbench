Conditions:
  IsProd:
    Fn::Equals:
      - 'StageName'
      - 'Production'
Globals:
  Function:
    Environment:
      Variables:
        TABLE_SUBSCRIPTION_EVENT:
          Ref: 'TableSubscriptionEvent'
Outputs:
  TableAccount:
    Description: 'The name of the DynamoDB table for TableAccount'
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-TableAccount'
    Value:
      Ref: 'TableAccount'
  TableMetric:
    Description: 'The name of the DynamoDB table for TableMetric'
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-TableMetric'
    Value:
      Ref: 'TableMetric'
  TablePlanMetric:
    Description: 'The name of the DynamoDB table for TablePlanMetric'
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-TablePlanMetric'
    Value:
      Ref: 'TablePlanMetric'
  TableSubscriptionEvent:
    Description: 'The name of the DynamoDB table for TableSubscriptionEvent'
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-TableSubscriptionEvent'
    Value:
      Ref: 'TableSubscriptionEvent'
Parameters:
  LogRetentionInDays:
    Default: '3'
    Description: 'Log retention in days'
    Type: 'Number'
Resources:
  FnEnricherSEUpsertc3e5eadf:
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        EntryPoints:
          - './index'
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: 'es2020'
    Properties:
      CodeUri: 'enricher--subscription-event--upsert'
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - 'ReportBatchItemFailures'
            Queue:
              Fn::GetAtt:
                - 'FnEnricherSEUpsertc3e5eadfQueue'
                - 'Arn'
          Type: 'SQS'
      MemorySize: 256
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - 'AWSLambda_ReadOnlyAccess'
        - 'AWSXrayWriteOnlyAccess'
        - 'CloudWatchLambdaInsightsExecutionRolePolicy'
        - CloudWatchPutMetricPolicy: {}
        - SQSSendMessagePolicy:
            QueueName:
              Fn::GetAtt:
                - 'FnEnricherSEUpsertc3e5eadfDLQ'
                - 'QueueName'
      Timeout: 30
    Type: 'AWS::Serverless::Function'
  FnEnricherSEUpsertc3e5eadfDLQ:
    Properties:
      KmsMasterKeyId:
        Fn::If:
          - 'IsProd'
          - Ref: 'FnEnricherSEUpsertc3e5eadfQueueKey'
          - 'AWS::NoValue'
    Type: 'AWS::SQS::Queue'
  FnEnricherSEUpsertc3e5eadfLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: '/aws/lambda/${FnEnricherSEUpsertc3e5eadf}'
      RetentionInDays:
        Ref: 'LogRetentionInDays'
    Type: 'AWS::Logs::LogGroup'
  FnEnricherSEUpsertc3e5eadfQueue:
    Properties:
      Fn::If:
        - 'IsProd'
        - KmsMasterKeyId:
            Ref: 'FnEnricherSEUpsertc3e5eadfQueueKey'
          RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - 'FnEnricherSEUpsertc3e5eadfDLQ'
                - 'Arn'
            maxReceiveCount: 3
          VisibilityTimeout: 320
        - RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - 'FnEnricherSEUpsertc3e5eadfDLQ'
                - 'Arn'
            maxReceiveCount: 3
          VisibilityTimeout: 320
    Type: 'AWS::SQS::Queue'
  FnEnricherSEUpsertc3e5eadfQueueKey:
    Condition: 'IsProd'
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
            Effect: 'Allow'
            Principal:
              Service: 'events.amazonaws.com'
            Resource: '*'
            Sid: 'Allow EventBridge to use the Key'
          - Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Effect: 'Allow'
            Principal:
              AWS:
                Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: '*'
            Sid: 'Allow administration of the key'
          - Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:DescribeKey'
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Fn::Sub: '${AWS::AccountId}'
                kms:ViaService: 'sqs.us-east-1.amazonaws.com'
            Effect: 'Allow'
            Principal:
              AWS: '*'
            Resource: '*'
            Sid:
              'Allow access through Simple Queue Service (SQS) for all
              principals in the account that are authorized to use SQS'
          - Action:
              - 'kms:Describe*'
              - 'kms:Get*'
              - 'kms:List*'
              - 'kms:RevokeGrant'
            Effect: 'Allow'
            Principal:
              AWS:
                Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: '*'
            Sid: 'Allow direct access to key metadata to the account'
        Version: '2012-10-17'
      PendingWindowInDays: 7
    Type: 'AWS::KMS::Key'
  FnEnricherSEUpsertc3e5eadfQueuePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'sqs:SendMessage'
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Fn::GetAtt:
                    - 'FnEnricherSEUpsertc3e5eadfRule'
                    - 'Arn'
            Effect: 'Allow'
            Principal:
              Service: 'events.amazonaws.com'
            Resource:
              Fn::GetAtt:
                - 'FnEnricherSEUpsertc3e5eadfQueue'
                - 'Arn'
            Sid: 'Allow EventBridge to send messages to the queue'
      Queues:
        - Ref: 'FnEnricherSEUpsertc3e5eadfQueue'
    Type: 'AWS::SQS::QueuePolicy'
  FnEnricherSEUpsertc3e5eadfRule:
    Properties:
      EventBusName: 'default'
      EventPattern:
        detail:
          dynamodb:
            NewImage:
              _et:
                S:
                  - 'SubscriptionEvent'
        detail-type:
          - 'INSERT'
          - 'MODIFY'
        resources:
          - Fn::GetAtt:
              - 'TableSubscriptionEvent'
              - 'Arn'
        source:
          - 'TableSubscriptionEvent.SubscriptionEvent'
      Targets:
        - Arn:
            Fn::GetAtt:
              - 'FnEnricherSEUpsertc3e5eadfQueue'
              - 'Arn'
          Id: 'FnEnricherSEUpsertc3e5eadf'
    Type: 'AWS::Events::Rule'
  FnReactorAUpsert7f5401fa:
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        EntryPoints:
          - './index'
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: 'es2020'
    Properties:
      CodeUri: 'reactor--account--upsert'
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - 'ReportBatchItemFailures'
            Queue:
              Fn::GetAtt:
                - 'FnReactorAUpsert7f5401faQueue'
                - 'Arn'
          Type: 'SQS'
      MemorySize: 256
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - 'AWSLambda_ReadOnlyAccess'
        - 'AWSXrayWriteOnlyAccess'
        - 'CloudWatchLambdaInsightsExecutionRolePolicy'
        - CloudWatchPutMetricPolicy: {}
        - SQSSendMessagePolicy:
            QueueName:
              Fn::GetAtt:
                - 'FnReactorAUpsert7f5401faDLQ'
                - 'QueueName'
      Timeout: 30
    Type: 'AWS::Serverless::Function'
  FnReactorAUpsert7f5401faDLQ:
    Properties:
      KmsMasterKeyId:
        Fn::If:
          - 'IsProd'
          - Ref: 'FnReactorAUpsert7f5401faQueueKey'
          - 'AWS::NoValue'
    Type: 'AWS::SQS::Queue'
  FnReactorAUpsert7f5401faLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: '/aws/lambda/${FnReactorAUpsert7f5401fa}'
      RetentionInDays:
        Ref: 'LogRetentionInDays'
    Type: 'AWS::Logs::LogGroup'
  FnReactorAUpsert7f5401faQueue:
    Properties:
      Fn::If:
        - 'IsProd'
        - KmsMasterKeyId:
            Ref: 'FnReactorAUpsert7f5401faQueueKey'
          RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - 'FnReactorAUpsert7f5401faDLQ'
                - 'Arn'
            maxReceiveCount: 3
          VisibilityTimeout: 320
        - RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - 'FnReactorAUpsert7f5401faDLQ'
                - 'Arn'
            maxReceiveCount: 3
          VisibilityTimeout: 320
    Type: 'AWS::SQS::Queue'
  FnReactorAUpsert7f5401faQueueKey:
    Condition: 'IsProd'
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
            Effect: 'Allow'
            Principal:
              Service: 'events.amazonaws.com'
            Resource: '*'
            Sid: 'Allow EventBridge to use the Key'
          - Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Effect: 'Allow'
            Principal:
              AWS:
                Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: '*'
            Sid: 'Allow administration of the key'
          - Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:DescribeKey'
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Fn::Sub: '${AWS::AccountId}'
                kms:ViaService: 'sqs.us-east-1.amazonaws.com'
            Effect: 'Allow'
            Principal:
              AWS: '*'
            Resource: '*'
            Sid:
              'Allow access through Simple Queue Service (SQS) for all
              principals in the account that are authorized to use SQS'
          - Action:
              - 'kms:Describe*'
              - 'kms:Get*'
              - 'kms:List*'
              - 'kms:RevokeGrant'
            Effect: 'Allow'
            Principal:
              AWS:
                Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: '*'
            Sid: 'Allow direct access to key metadata to the account'
        Version: '2012-10-17'
      PendingWindowInDays: 7
    Type: 'AWS::KMS::Key'
  FnReactorAUpsert7f5401faQueuePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'sqs:SendMessage'
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Fn::GetAtt:
                    - 'FnReactorAUpsert7f5401faRule'
                    - 'Arn'
            Effect: 'Allow'
            Principal:
              Service: 'events.amazonaws.com'
            Resource:
              Fn::GetAtt:
                - 'FnReactorAUpsert7f5401faQueue'
                - 'Arn'
            Sid: 'Allow EventBridge to send messages to the queue'
      Queues:
        - Ref: 'FnReactorAUpsert7f5401faQueue'
    Type: 'AWS::SQS::QueuePolicy'
  FnReactorAUpsert7f5401faRule:
    Properties:
      EventBusName: 'default'
      EventPattern:
        detail:
          dynamodb:
            NewImage:
              _et:
                S:
                  - 'Account'
        detail-type:
          - 'INSERT'
          - 'MODIFY'
        resources:
          - Fn::GetAtt:
              - 'TableAccount'
              - 'Arn'
        source:
          - 'TableAccount.Account'
      Targets:
        - Arn:
            Fn::GetAtt:
              - 'FnReactorAUpsert7f5401faQueue'
              - 'Arn'
          Id: 'FnReactorAUpsert7f5401fa'
    Type: 'AWS::Events::Rule'
  FnReactorPMUpsert2b2e8d7d:
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        EntryPoints:
          - './index'
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: 'es2020'
    Properties:
      CodeUri: 'reactor--plan-metric--upsert'
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - 'ReportBatchItemFailures'
            Queue:
              Fn::GetAtt:
                - 'FnReactorPMUpsert2b2e8d7dQueue'
                - 'Arn'
          Type: 'SQS'
      MemorySize: 256
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - 'AWSLambda_ReadOnlyAccess'
        - 'AWSXrayWriteOnlyAccess'
        - 'CloudWatchLambdaInsightsExecutionRolePolicy'
        - CloudWatchPutMetricPolicy: {}
        - SQSSendMessagePolicy:
            QueueName:
              Fn::GetAtt:
                - 'FnReactorPMUpsert2b2e8d7dDLQ'
                - 'QueueName'
      Timeout: 30
    Type: 'AWS::Serverless::Function'
  FnReactorPMUpsert2b2e8d7dDLQ:
    Properties:
      KmsMasterKeyId:
        Fn::If:
          - 'IsProd'
          - Ref: 'FnReactorPMUpsert2b2e8d7dQueueKey'
          - 'AWS::NoValue'
    Type: 'AWS::SQS::Queue'
  FnReactorPMUpsert2b2e8d7dLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: '/aws/lambda/${FnReactorPMUpsert2b2e8d7d}'
      RetentionInDays:
        Ref: 'LogRetentionInDays'
    Type: 'AWS::Logs::LogGroup'
  FnReactorPMUpsert2b2e8d7dQueue:
    Properties:
      Fn::If:
        - 'IsProd'
        - KmsMasterKeyId:
            Ref: 'FnReactorPMUpsert2b2e8d7dQueueKey'
          RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - 'FnReactorPMUpsert2b2e8d7dDLQ'
                - 'Arn'
            maxReceiveCount: 3
          VisibilityTimeout: 320
        - RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - 'FnReactorPMUpsert2b2e8d7dDLQ'
                - 'Arn'
            maxReceiveCount: 3
          VisibilityTimeout: 320
    Type: 'AWS::SQS::Queue'
  FnReactorPMUpsert2b2e8d7dQueueKey:
    Condition: 'IsProd'
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
            Effect: 'Allow'
            Principal:
              Service: 'events.amazonaws.com'
            Resource: '*'
            Sid: 'Allow EventBridge to use the Key'
          - Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Effect: 'Allow'
            Principal:
              AWS:
                Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: '*'
            Sid: 'Allow administration of the key'
          - Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:DescribeKey'
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Fn::Sub: '${AWS::AccountId}'
                kms:ViaService: 'sqs.us-east-1.amazonaws.com'
            Effect: 'Allow'
            Principal:
              AWS: '*'
            Resource: '*'
            Sid:
              'Allow access through Simple Queue Service (SQS) for all
              principals in the account that are authorized to use SQS'
          - Action:
              - 'kms:Describe*'
              - 'kms:Get*'
              - 'kms:List*'
              - 'kms:RevokeGrant'
            Effect: 'Allow'
            Principal:
              AWS:
                Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: '*'
            Sid: 'Allow direct access to key metadata to the account'
        Version: '2012-10-17'
      PendingWindowInDays: 7
    Type: 'AWS::KMS::Key'
  FnReactorPMUpsert2b2e8d7dQueuePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'sqs:SendMessage'
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Fn::GetAtt:
                    - 'FnReactorPMUpsert2b2e8d7dRule'
                    - 'Arn'
            Effect: 'Allow'
            Principal:
              Service: 'events.amazonaws.com'
            Resource:
              Fn::GetAtt:
                - 'FnReactorPMUpsert2b2e8d7dQueue'
                - 'Arn'
            Sid: 'Allow EventBridge to send messages to the queue'
      Queues:
        - Ref: 'FnReactorPMUpsert2b2e8d7dQueue'
    Type: 'AWS::SQS::QueuePolicy'
  FnReactorPMUpsert2b2e8d7dRule:
    Properties:
      EventBusName: 'default'
      EventPattern:
        detail:
          dynamodb:
            NewImage:
              _et:
                S:
                  - 'PlanMetric'
        detail-type:
          - 'INSERT'
          - 'MODIFY'
        resources:
          - Fn::GetAtt:
              - 'TablePlanMetric'
              - 'Arn'
        source:
          - 'TablePlanMetric.PlanMetric'
      Targets:
        - Arn:
            Fn::GetAtt:
              - 'FnReactorPMUpsert2b2e8d7dQueue'
              - 'Arn'
          Id: 'FnReactorPMUpsert2b2e8d7d'
    Type: 'AWS::Events::Rule'
  TableAccount:
    Properties:
      AttributeDefinitions:
        - AttributeName: 'pk'
          AttributeType: 'S'
        - AttributeName: 'sk'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      GlobalSecondaryIndexes:
        - IndexName: 'gsi1'
          KeySchema:
            - AttributeName: 'gsi1pk'
              KeyType: 'HASH'
            - AttributeName: 'gsi1sk'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: 'ALL'
      KeySchema:
        - AttributeName: 'pk'
          KeyType: 'HASH'
        - AttributeName: 'sk'
          KeyType: 'RANGE'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      SSESpecification:
        SSEEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      Tags:
        - Key: 'StageName'
          Value:
            Ref: 'StageName'
        - Key: 'TableName'
          Value: 'TableAccount'
    Type: 'AWS::DynamoDB::Table'
  TableAccountCDCDispatcher:
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        EntryPoints:
          - './index'
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: 'es2020'
    Properties:
      CodeUri: 'dispatcher-table-account'
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - 'ReportBatchItemFailures'
            MaximumRetryAttempts: 3
            StartingPosition: 'TRIM_HORIZON'
            Stream:
              Fn::GetAtt:
                - 'TableAccount'
                - 'StreamArn'
          Type: 'DynamoDB'
      MemorySize: 256
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - 'AWSLambda_ReadOnlyAccess'
        - 'AWSXrayWriteOnlyAccess'
        - 'CloudWatchLambdaInsightsExecutionRolePolicy'
        - CloudWatchPutMetricPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: 'default'
      Timeout: 30
    Type: 'AWS::Serverless::Function'
  TableAccountCDCDispatcherLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: '/aws/lambda/${TableAccountCDCDispatcher}'
      RetentionInDays:
        Ref: 'LogRetentionInDays'
    Type: 'AWS::Logs::LogGroup'
  TableMetric:
    Properties:
      AttributeDefinitions:
        - AttributeName: 'pk'
          AttributeType: 'S'
        - AttributeName: 'sk'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      KeySchema:
        - AttributeName: 'pk'
          KeyType: 'HASH'
        - AttributeName: 'sk'
          KeyType: 'RANGE'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      SSESpecification:
        SSEEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      Tags:
        - Key: 'StageName'
          Value:
            Ref: 'StageName'
        - Key: 'TableName'
          Value: 'TableMetric'
    Type: 'AWS::DynamoDB::Table'
  TablePlanMetric:
    Properties:
      AttributeDefinitions:
        - AttributeName: 'pk'
          AttributeType: 'S'
        - AttributeName: 'sk'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      KeySchema:
        - AttributeName: 'pk'
          KeyType: 'HASH'
        - AttributeName: 'sk'
          KeyType: 'RANGE'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      SSESpecification:
        SSEEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      Tags:
        - Key: 'StageName'
          Value:
            Ref: 'StageName'
        - Key: 'TableName'
          Value: 'TablePlanMetric'
    Type: 'AWS::DynamoDB::Table'
  TablePlanMetricCDCDispatcher:
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        EntryPoints:
          - './index'
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: 'es2020'
    Properties:
      CodeUri: 'dispatcher-table-plan-metric'
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - 'ReportBatchItemFailures'
            MaximumRetryAttempts: 3
            StartingPosition: 'TRIM_HORIZON'
            Stream:
              Fn::GetAtt:
                - 'TablePlanMetric'
                - 'StreamArn'
          Type: 'DynamoDB'
      MemorySize: 256
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - 'AWSLambda_ReadOnlyAccess'
        - 'AWSXrayWriteOnlyAccess'
        - 'CloudWatchLambdaInsightsExecutionRolePolicy'
        - CloudWatchPutMetricPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: 'default'
      Timeout: 30
    Type: 'AWS::Serverless::Function'
  TablePlanMetricCDCDispatcherLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: '/aws/lambda/${TablePlanMetricCDCDispatcher}'
      RetentionInDays:
        Ref: 'LogRetentionInDays'
    Type: 'AWS::Logs::LogGroup'
  TableSubscriptionEvent:
    Properties:
      AttributeDefinitions:
        - AttributeName: 'pk'
          AttributeType: 'S'
        - AttributeName: 'sk'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      KeySchema:
        - AttributeName: 'pk'
          KeyType: 'HASH'
        - AttributeName: 'sk'
          KeyType: 'RANGE'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      SSESpecification:
        SSEEnabled:
          Fn::If:
            - 'IsProd'
            - true
            - false
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      Tags:
        - Key: 'StageName'
          Value:
            Ref: 'StageName'
        - Key: 'TableName'
          Value: 'TableSubscriptionEvent'
    Type: 'AWS::DynamoDB::Table'
  TableSubscriptionEventCDCDispatcher:
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        EntryPoints:
          - './index'
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: 'es2020'
    Properties:
      CodeUri: 'dispatcher-table-subscription-event'
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - 'ReportBatchItemFailures'
            MaximumRetryAttempts: 3
            StartingPosition: 'TRIM_HORIZON'
            Stream:
              Fn::GetAtt:
                - 'TableSubscriptionEvent'
                - 'StreamArn'
          Type: 'DynamoDB'
      MemorySize: 256
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - 'AWSLambda_ReadOnlyAccess'
        - 'AWSXrayWriteOnlyAccess'
        - 'CloudWatchLambdaInsightsExecutionRolePolicy'
        - CloudWatchPutMetricPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: 'default'
      Timeout: 30
    Type: 'AWS::Serverless::Function'
  TableSubscriptionEventCDCDispatcherLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: '/aws/lambda/${TableSubscriptionEventCDCDispatcher}'
      RetentionInDays:
        Ref: 'LogRetentionInDays'
    Type: 'AWS::Logs::LogGroup'
