#!/usr/bin/env bash

set -euo pipefail

build () {
  local app="$1"
  local build_dir
  build_dir="$(path_to_build_dir "$app")"
  local template_file
  template_file="$(path_to_template_file "$app")"

  log "Building $app in $build_dir"

  sam build \
    --build-dir "$build_dir" \
    --beta-features \
    --template-file "$template_file"

  for dir in $(path_to_build_dir "$app")/*/; do
    local app_dir
    app_dir="$(path_to_example "$app")"
    if [ -f  "$app_dir/collector.yml" ]; then
      cp "$app_dir/collector.yml" "$dir/collector.yml"
    fi

    if [ -f "$app_dir/otel-handler" ]; then
      cp "$app_dir/otel-handler" "$dir/otel-handler"
    fi
  done
}

deploy () {
  local provider="$1"
  shift

  if [ "$provider" == "localstack" ]; then
    log "Initializing LocalStack"
    initialize_localstack
  fi

  if [ "$#" == "0" ]; then
    log "No examples specified, deploying all to $provider"
    deploy_all "$provider"
  else
    deploy_one "$provider" "$@"
  fi
}

deploy_one () {
  local provider="$1"
  local app="$2"

  log "Deploying $app to $provider"

  build "$app"

  local stackname
  stackname="$(get_stack_name "$app")"
  stagename="${STAGE_NAME:-development}"
  if [ -n "${CI:-}" ]; then
    stagename="test"
  fi

  local cmd
  case "$provider" in
    aws)
      cmd="sam"
      ;;
    localstack)
      cmd="samlocal"
      # There seems to be a bug with localstack and conditionals. false
      # conditions break the deploy without explanation, so in localstack where
      # costs don't matter, we'll deploy in production mode.
      stagename="production"
      ;;
    *)
      log "Unknown provider $provider"
      return 1
      ;;
  esac

  local parameter_overrides=''
  parameter_overrides+="ParameterKey=StageName,ParameterValue=$stagename"
  parameter_overrides+=" ParameterKey=RepoUrl,ParameterValue=$(git remote get-url origin)"
  parameter_overrides+=" ParameterKey=SHA,ParameterValue=${GITHUB_SHA:-$(git rev-parse head)}"
  local branch_name
  if [ -n "${GITHUB_REF:-}" ]; then
    branch_name="$(echo "$GITHUB_REF" | cut -d '/' -f 3-)"
  else
    branch_name="$(git rev-parse --abbrev-ref HEAD)"
  fi
  parameter_overrides+=" ParameterKey=BranchName,ParameterValue=$branch_name"

  # doesn't need a template because it will use the one in .aws-sam that was
  # just created by sam build
  "$cmd" deploy \
    --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
    --no-fail-on-empty-changeset \
    --parameter-overrides "$parameter_overrides" \
    --region "${AWS_REGION:-us-east-1}" \
    --resolve-s3 \
    --stack-name "$stackname" \
    --template-file "$(path_to_build_dir "$app")/template.yaml"
}

deploy_all () {
  local provider="$1"
  shift

  list_all_apps | xargs -n 1 -P 4 /usr/bin/env bash -euo pipefail -c 'deploy_one "$@"' _ "$provider"
}

destroy () {
  local provider="$1"
  shift
  if [ "$#" == "0" ]; then
    log "No examples specified, destroying all at $provider"
    destroy_all "$provider"
  else
    destroy_one "$provider" "$@"
  fi
}

destroy_all () {
  local provider="$1"
  shift

  list_all_apps | xargs -n 1 -P 4 /usr/bin/env bash -euo pipefail -c 'destroy_one "$@"' _ "$provider"
}

destroy_one () {
  local provider="$1"
  local app="$2"

  log "Destroying $app at $provider"

  local stackname
  stackname="$(get_stack_name "$app")"

  local cmd
  case "$provider" in
    aws)
      cmd="sam"
      ;;
    localstack)
      cmd="samlocal"
      ;;
    *)
      log "Unknown provider $provider"
      return 1
      ;;
  esac

  # doesn't need a template because it will use the one in .aws-sam that was
  # just created by sam build
  "$cmd" delete \
    --no-prompts \
    --region "${AWS_REGION:-us-east-1}" \
    --stack-name "$stackname"
}

get_stack_name () {
  if [ -n "${STACK_NAME:-}" ]; then
    echo "$STACK_NAME"
    return 0
  fi

  local app="$1"

  npx ---no-install @code-like-a-carpenter/cli stack:name --project-name "$app"

  return 0
}

initialize_localstack () {
  log "Ensuing LocalStack is dependencies are installed"
  pip3 install --upgrade pyopenssl
  pip3 install localstack awscli-local[ver1] aws-sam-cli-local
  # Localstack 1.4 seems to have a bug with CloudFormation Swagger so until 1.5
  # gets tagged, I'm just going to have to hope that latest remains stable.
  docker pull localstack/localstack:latest

  log "Starting LocalStack"
  # --wait doesn't app to be available with the docker-compose version on
  # GitHub Actions runners...
  docker-compose up --detach

  log "Waiting for LocalStack startup..."
  # ...so we'll simulate it with wait-on
  npx wait-on http://127.0.0.1:4566
  log "Startup complete"

  return 0
}

is_deployed () {
  local provider="$1"
  local app="$2"

  local stackname
  stackname="$(get_stack_name "$app")"

  local cmd
  case "$provider" in
    aws)
      cmd="aws"
      ;;
    localstack)
      cmd="awslocal"
      ;;
    *)
      log "Unknown provider $provider"
      return 1
      ;;
  esac

  local status
  status=$($cmd cloudformation describe-stacks \
    --region "${AWS_REGION:-us-east-1}" \
    --stack-name "$stackname" \
    --query 'Stacks[0].StackStatus' \
    --output text 2>/dev/null || true)

  if [ "$status" == "DELETE_COMPLETE" ]; then
    return 1
  fi

  if [ -z "$status" ]; then
    return 1
  fi

  return 0
}

list_all_apps () {
  npx ---no-install @code-like-a-carpenter/cli stack:list --as-projects

  return 0
}

log () {
  echo "$@" 1>&2

  return 0
}

path_to_build_dir () {
  local app="$1"
  echo "$(path_to_example "$app")/.aws-sam/build"
  return 0
}

path_to_example () {
  local app="$1"
  local dir="examples/$app"

  if [ ! -d "$dir" ]; then
    log "Example $app does not exist at $dir"
    return 1
  fi

  echo "$dir"
  return 0
}

path_to_template_file () {
  local app="$1"
  if [ -f "$(path_to_example "$app")/__generated__/template.yml" ]; then
    echo "$(path_to_example "$app")/__generated__/template.yml"
    return 0
  fi
  echo "$(path_to_example "$app")/template.yml"
  return 0
}

redeploy () {
  local provider="$1"
  shift

  if [ "$#" == "0" ]; then
    log "No examples specified, redeploying all to $provider"
    redeploy_all "$provider"
  else
    redeploy_one "$provider" "$@"
  fi
}

redeploy_all () {
  local provider="$1"
  shift

  list_all_apps | xargs -n 1 -P 4 /usr/bin/env bash -euo pipefail -c 'redeploy_one "$@"' _ "$provider"
}

redeploy_one () {
  local provider="$1"
  local app="$2"

  if is_deployed "$provider" "$app"; then
    destroy "$provider" "$app"
  fi

  deploy "$provider" "$app"
}

# export all functions so they can be called with bash -c
for func in $(declare -F | cut -d ' ' -f 3); do
  # shellcheck disable=SC2163
  export -f "$func"
done

main () {
  local action="$1"
  shift

  case "$action" in
    build)
      build "$@"
      return 0
      ;;
    deploy)
      ;;
    destroy)
      ;;
    redeploy)
      ;;
    *)
      log "Unknown action $action"
      return 1
      ;;
  esac

  local provider="$1"

  case "$provider" in
    aws)
      "$action" "$@"
      return 0
      ;;
    localstack)
      "$action" "$@"
      return 0
      ;;
    *)
      log "Unknown provider $provider"
      return 1
      ;;
  esac
}

main "$@"
