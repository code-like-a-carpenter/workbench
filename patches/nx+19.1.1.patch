diff --git a/node_modules/nx/src/command-line/release/config/config.d.ts b/node_modules/nx/src/command-line/release/config/config.d.ts
index 04c2921..e31b942 100644
--- a/node_modules/nx/src/command-line/release/config/config.d.ts
+++ b/node_modules/nx/src/command-line/release/config/config.d.ts
@@ -25,6 +25,11 @@ type RemoveBooleanFromPropertiesOnEach<T, K extends keyof T[keyof T]> = {
     [U in keyof T]: RemoveBooleanFromProperties<T[U], K>;
 };
 export declare const IMPLICIT_DEFAULT_RELEASE_GROUP = "__default__";
+
+type DefiniteRelease = Exclude<NxJsonConfiguration['release'], undefined>;
+type DefiniteChangeLog = Exclude<DefiniteRelease['changelog'], undefined>;
+type DefiniteConventionalCommits = Exclude<DefiniteRelease['conventionalCommits'], undefined>;
+type DefiniteTypes = Exclude<DefiniteConventionalCommits['types'], undefined>;
 /**
  * Our source of truth is a deeply required variant of the user-facing config interface, so that command
  * implementations can be sure that properties will exist and do not need to repeat the same checks over
@@ -34,11 +39,11 @@ export declare const IMPLICIT_DEFAULT_RELEASE_GROUP = "__default__";
  * it easier to work with (the user could be specifying a single string, and they can also use any valid matcher
  * pattern such as directories and globs).
  */
-export type NxReleaseConfig = Omit<DeepRequired<NxJsonConfiguration['release'] & {
-    groups: DeepRequired<RemoveTrueFromPropertiesOnEach<EnsureProjectsArray<NxJsonConfiguration['release']['groups']>, 'changelog'>>;
-    changelog: RemoveTrueFromProperties<DeepRequired<NxJsonConfiguration['release']['changelog']>, 'workspaceChangelog' | 'projectChangelogs'>;
+export type NxReleaseConfig = Omit<DeepRequired<DefiniteRelease & {
+    groups: DeepRequired<RemoveTrueFromPropertiesOnEach<EnsureProjectsArray<DefiniteRelease['groups']>, 'changelog'>>;
+    changelog: RemoveTrueFromProperties<DeepRequired<DefiniteChangeLog>, 'workspaceChangelog' | 'projectChangelogs'>;
     conventionalCommits: {
-        types: RemoveBooleanFromPropertiesOnEach<DeepRequired<RemoveBooleanFromProperties<DeepRequired<NxJsonConfiguration['release']['conventionalCommits']['types']>, string>>, 'changelog'>;
+        types: RemoveBooleanFromPropertiesOnEach<DeepRequired<RemoveBooleanFromProperties<DeepRequired<DefiniteTypes>, string>>, 'changelog'>;
     };
 }>, 'projects'>;
 export interface CreateNxReleaseConfigError {
diff --git a/node_modules/nx/src/command-line/release/config/filter-release-groups.d.ts b/node_modules/nx/src/command-line/release/config/filter-release-groups.d.ts
index bffd713..4a50e9c 100644
--- a/node_modules/nx/src/command-line/release/config/filter-release-groups.d.ts
+++ b/node_modules/nx/src/command-line/release/config/filter-release-groups.d.ts
@@ -1,6 +1,7 @@
 import { ProjectGraph } from '../../../config/project-graph';
 import { NxReleaseConfig } from './config';
-export type ReleaseGroupWithName = NxReleaseConfig['groups'][string] & {
+type DefiniteGroups = Exclude<NxReleaseConfig['groups'], undefined>;
+export type ReleaseGroupWithName = DefiniteGroups[string] & {
     name: string;
 };
 export declare function filterReleaseGroups(projectGraph: ProjectGraph, nxReleaseConfig: NxReleaseConfig, projectsFilter?: string[], groupsFilter?: string[]): {
diff --git a/node_modules/nx/src/native/index.d.ts b/node_modules/nx/src/native/index.d.ts
index 3bd096b..71f4d62 100644
--- a/node_modules/nx/src/native/index.d.ts
+++ b/node_modules/nx/src/native/index.d.ts
@@ -1,6 +1,13 @@
 /* tslint:disable */
 /* eslint-disable */
 
+type JsInputs = unknown
+type JsExternal = unknown
+type HashInstruction = unknown
+type ProjectFiles = unknown
+type ProjectRootMappings = unknown
+type NapiDashMap = unknown
+
 /* auto-generated by NAPI-RS */
 
 export class ExternalObject<T> {
diff --git a/node_modules/nx/src/project-graph/plugins/loader.js b/node_modules/nx/src/project-graph/plugins/loader.js
index 66d7b36..9f7cdab 100644
--- a/node_modules/nx/src/project-graph/plugins/loader.js
+++ b/node_modules/nx/src/project-graph/plugins/loader.js
@@ -198,7 +198,6 @@ async function loadNxPluginAsync(pluginConfiguration, paths, root) {
         performance.mark(`Load Nx Plugin: ${moduleName} - start`);
         let { pluginPath, name } = await getPluginPathAndName(moduleName, paths, projectsWithoutInference, root);
         const plugin = (0, utils_1.normalizeNxPlugin)(await importPluginModule(pluginPath));
-        plugin.name ??= name;
         performance.mark(`Load Nx Plugin: ${moduleName} - end`);
         performance.measure(`Load Nx Plugin: ${moduleName}`, `Load Nx Plugin: ${moduleName} - start`, `Load Nx Plugin: ${moduleName} - end`);
         return new internal_api_1.LoadedNxPlugin(plugin, pluginConfiguration);
@@ -209,7 +208,7 @@ async function loadNxPluginAsync(pluginConfiguration, paths, root) {
 }
 exports.loadNxPluginAsync = loadNxPluginAsync;
 async function importPluginModule(pluginPath) {
-    const m = await Promise.resolve(`${pluginPath}`).then(s => require(s));
+    const m = await Promise.resolve(`${pluginPath}`).then(s => import(s));
     if (m.default &&
         ('createNodes' in m.default || 'createDependencies' in m.default)) {
         return m.default;
