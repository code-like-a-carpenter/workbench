diff --git a/node_modules/nx/src/command-line/release/config/config.d.ts b/node_modules/nx/src/command-line/release/config/config.d.ts
index 04c2921..7f3ce6f 100644
--- a/node_modules/nx/src/command-line/release/config/config.d.ts
+++ b/node_modules/nx/src/command-line/release/config/config.d.ts
@@ -25,6 +25,11 @@ type RemoveBooleanFromPropertiesOnEach<T, K extends keyof T[keyof T]> = {
     [U in keyof T]: RemoveBooleanFromProperties<T[U], K>;
 };
 export declare const IMPLICIT_DEFAULT_RELEASE_GROUP = "__default__";
+
+type DefiniteRelease = Exclude<NxJsonConfiguration['release'], undefined>;
+type DefiniteChangeLog = Exclude<DefiniteRelease['changelog'], undefined>;
+type DefiniteConventionalCommits = Exclude<DefiniteRelease['conventionalCommits'], undefined>;
+type DefiniteTypes = Exclude<DefiniteConventionalCommits['types'], undefined>;
 /**
  * Our source of truth is a deeply required variant of the user-facing config interface, so that command
  * implementations can be sure that properties will exist and do not need to repeat the same checks over
@@ -34,18 +39,18 @@ export declare const IMPLICIT_DEFAULT_RELEASE_GROUP = "__default__";
  * it easier to work with (the user could be specifying a single string, and they can also use any valid matcher
  * pattern such as directories and globs).
  */
-export type NxReleaseConfig = Omit<DeepRequired<NxJsonConfiguration['release'] & {
-    groups: DeepRequired<RemoveTrueFromPropertiesOnEach<EnsureProjectsArray<NxJsonConfiguration['release']['groups']>, 'changelog'>>;
-    changelog: RemoveTrueFromProperties<DeepRequired<NxJsonConfiguration['release']['changelog']>, 'workspaceChangelog' | 'projectChangelogs'>;
+export type NxReleaseConfig = Omit<DeepRequired<DefiniteRelease & {
+    groups: DeepRequired<RemoveTrueFromPropertiesOnEach<EnsureProjectsArray<DefiniteRelease['groups']>, 'changelog'>>;
+    changelog: RemoveTrueFromProperties<DeepRequired<DefiniteChangeLog>, 'workspaceChangelog' | 'projectChangelogs'>;
     conventionalCommits: {
-        types: RemoveBooleanFromPropertiesOnEach<DeepRequired<RemoveBooleanFromProperties<DeepRequired<NxJsonConfiguration['release']['conventionalCommits']['types']>, string>>, 'changelog'>;
+        types: RemoveBooleanFromPropertiesOnEach<DeepRequired<RemoveBooleanFromProperties<DeepRequired<DefiniteTypes>, string>>, 'changelog'>;
     };
 }>, 'projects'>;
 export interface CreateNxReleaseConfigError {
     code: 'PROJECTS_AND_GROUPS_DEFINED' | 'RELEASE_GROUP_MATCHES_NO_PROJECTS' | 'RELEASE_GROUP_RELEASE_TAG_PATTERN_VERSION_PLACEHOLDER_MISSING_OR_EXCESSIVE' | 'PROJECT_MATCHES_MULTIPLE_GROUPS' | 'CONVENTIONAL_COMMITS_SHORTHAND_MIXED_WITH_OVERLAPPING_GENERATOR_OPTIONS' | 'GLOBAL_GIT_CONFIG_MIXED_WITH_GRANULAR_GIT_CONFIG';
     data: Record<string, string | string[]>;
 }
-export declare function createNxReleaseConfig(projectGraph: ProjectGraph, projectFileMap: ProjectFileMap, userConfig?: NxJsonConfiguration['release']): Promise<{
+export declare function createNxReleaseConfig(projectGraph: ProjectGraph, projectFileMap: ProjectFileMap, userConfig?: DefiniteRelease): Promise<{
     error: null | CreateNxReleaseConfigError;
     nxReleaseConfig: NxReleaseConfig | null;
 }>;
diff --git a/node_modules/nx/src/command-line/release/config/filter-release-groups.d.ts b/node_modules/nx/src/command-line/release/config/filter-release-groups.d.ts
index bffd713..4a50e9c 100644
--- a/node_modules/nx/src/command-line/release/config/filter-release-groups.d.ts
+++ b/node_modules/nx/src/command-line/release/config/filter-release-groups.d.ts
@@ -1,6 +1,7 @@
 import { ProjectGraph } from '../../../config/project-graph';
 import { NxReleaseConfig } from './config';
-export type ReleaseGroupWithName = NxReleaseConfig['groups'][string] & {
+type DefiniteGroups = Exclude<NxReleaseConfig['groups'], undefined>;
+export type ReleaseGroupWithName = DefiniteGroups[string] & {
     name: string;
 };
 export declare function filterReleaseGroups(projectGraph: ProjectGraph, nxReleaseConfig: NxReleaseConfig, projectsFilter?: string[], groupsFilter?: string[]): {
diff --git a/node_modules/nx/src/generators/tree.d.ts b/node_modules/nx/src/generators/tree.d.ts
index 2ac8002..633eb18 100644
--- a/node_modules/nx/src/generators/tree.d.ts
+++ b/node_modules/nx/src/generators/tree.d.ts
@@ -1,6 +1,3 @@
-/// <reference types="node" />
-/// <reference types="@types/node/ts4.8/fs" />
-/// <reference types="node" />
 import type { Mode } from 'fs';
 /**
  * Options to set when writing a file in the Virtual file system tree.
diff --git a/node_modules/nx/src/native/index.d.ts b/node_modules/nx/src/native/index.d.ts
index d05d51b..36c4068 100644
--- a/node_modules/nx/src/native/index.d.ts
+++ b/node_modules/nx/src/native/index.d.ts
@@ -1,6 +1,13 @@
 /* tslint:disable */
 /* eslint-disable */
 
+type JsInputs = unknown
+type JsExternal = unknown
+type HashInstruction = unknown
+type ProjectFiles = unknown
+type ProjectRootMappings = unknown
+type NapiDashMap = unknown
+
 /* auto-generated by NAPI-RS */
 
 export class ExternalObject<T> {
diff --git a/node_modules/nx/src/utils/fileutils.d.ts b/node_modules/nx/src/utils/fileutils.d.ts
index db1decb..4993774 100644
--- a/node_modules/nx/src/utils/fileutils.d.ts
+++ b/node_modules/nx/src/utils/fileutils.d.ts
@@ -1,5 +1,3 @@
-/// <reference types="node" />
-/// <reference types="@types/node/ts4.8/fs" />
 import type { JsonParseOptions, JsonSerializeOptions } from './json';
 import { PathLike } from 'fs';
 export interface JsonReadOptions extends JsonParseOptions {
